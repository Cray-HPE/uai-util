/*
*
*  MIT License
*
*  (C) Copyright [2022] Hewlett Packard Enterprise Development LP
*
*  Permission is hereby granted, free of charge, to any person obtaining a
*  copy of this software and associated documentation files (the "Software"),
*  to deal in the Software without restriction, including without limitation
*  the rights to use, copy, modify, merge, publish, distribute, sublicense,
*  and/or sell copies of the Software, and to permit persons to whom the
*  Software is furnished to do so, subject to the following conditions:
*
*  The above copyright notice and this permission notice shall be included
*  in all copies or substantial portions of the Software.
*
*  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
*  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
*  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
*  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
*  OTHER DEALINGS IN THE SOFTWARE.
*
*/
@Library('csm-shared-library@c20e96388') _

pipeline {
    agent {
        label "metal-gcp-builder"
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: "10"))
        timestamps()
    }

    environment {
        NAME = "cray-uai-util"
        DESCRIPTION = "Cray User Access Instance Supporting tools"
        IS_STABLE = getBuildIsStable()
        BUILD_METADATA = getRpmRevision(isStable: env.IS_STABLE)
    }

    stages {
        stage("Build SP3") {
            agent {
                docker {
                    image "arti.dev.cray.com/dstbuildenv-docker-master-local/cray-sle15sp3_build_environment:latest"
                    reuseNode true
                    // Support docker in docker for clamav scan
                    args "-u root -v /var/run/docker.sock:/var/run/docker.sock -v /usr/bin/docker:/usr/bin/docker --group-add 999"
                }
            }
            steps {
                withCredentials([
                            usernamePassword(credentialsId: 'artifactory-algol60', usernameVariable: 'SLES_REPO_USERNAME', passwordVariable: 'SLES_REPO_PASSWORD')
                    ]) {
                    sh "make rpm"
                }
            }
        }
        stage("Publish SP3") {
            steps {
                sh "sudo chown -R jenkins:jenkins $WORKSPACE/dist*/rpmbuild"
                script {
                    publishCsmRpms(os: 'sle-15sp3', component: env.NAME, pattern: "dist/rpmbuild/RPMS/x86_64/*.rpm", arch: "x86_64", isStable: env.IS_STABLE)
                    publishCsmRpms(os: 'sle-15sp3', component: env.NAME, pattern: "dist/rpmbuild/SRPMS/*.rpm", arch: "src", isStable: env.IS_STABLE)
                }
            }
        }
        stage("Build SP4") {
            agent {
                docker {
                    image "arti.dev.cray.com/dstbuildenv-docker-master-local/cray-sle15sp4_build_environment:latest"
                    reuseNode true
                    // Support docker in docker for clamav scan
                    args "-u root -v /var/run/docker.sock:/var/run/docker.sock -v /usr/bin/docker:/usr/bin/docker --group-add 999"
                }
            }
            steps {
                withCredentials([
                            usernamePassword(credentialsId: 'artifactory-algol60', usernameVariable: 'SLES_REPO_USERNAME', passwordVariable: 'SLES_REPO_PASSWORD')
                    ]) {
                    sh "make rpm"
                }
            }
        }
        stage("Publish SP4") {
            steps {
                sh "sudo chown -R jenkins:jenkins $WORKSPACE/dist*/rpmbuild"
                script {
                    publishCsmRpms(os: 'sle-15sp4', component: env.NAME, pattern: "dist/rpmbuild/RPMS/x86_64/*.rpm", arch: "x86_64", isStable: env.IS_STABLE)
                    publishCsmRpms(os: 'sle-15sp4', component: env.NAME, pattern: "dist/rpmbuild/SRPMS/*.rpm", arch: "src", isStable: env.IS_STABLE)
                }
            }
        }
    }
}
